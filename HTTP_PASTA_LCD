#include <SPI.h>
#include <Wire.h>
#include <RTClib.h>
#include <LiquidCrystal_I2C.h>
#include <ESP32WebServer.h>
#include <WiFi.h>
#include <HTTPClient.h>

RTC_DS1307 rtc;
LiquidCrystal_I2C lcd(0x27, 16, 2);
bool alarmeAtivo = false;
int horaDespertador = 23;
int minutoDespertador = 0;
const char* ssid = "Luciano";
const char* password = "yuji2106";

const char* serverName = "http://10.0.0.101:80/postpath";  // ip do esp client //

void setup() {
  
  Wire.begin();
  rtc.begin();

  if (!rtc.isrunning())  Serial.begin(115200);
  {
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

lcd.init();
lcd.backlight();
lcd.clear();

  // Conectar-se à rede Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando ao WiFi...");
  }
  Serial.println("Conectado ao WiFi!");

  if(WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    
    http.begin(serverName);
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");
    
    int httpCode = http.POST("key=value"); // POST data

    if(httpCode > 0) {
        // Verificar o código de resposta HTTP
        if(httpCode == HTTP_CODE_OK) {
            String payload = http.getString();
            Serial.println(payload);
        }
    } else {
        Serial.printf("Erro na requisição HTTP: %s\n", http.errorToString(httpCode).c_str());
    }

    http.end();
  }
}
void enviar_req (){
if(WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    
    http.begin(serverName);
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");
    
    int httpCode = http.POST("key=value"); // POST data

    if(httpCode > 0) {
        // Verificar o código de resposta HTTP
        if(httpCode == HTTP_CODE_OK) {
            String payload = http.getString();
            Serial.println(payload);
        }
    } else {
        Serial.printf("Erro na requisição HTTP: %s\n", http.errorToString(httpCode).c_str());
    }

    http.end();
  }
}
void loop() {

  DateTime now = rtc.now();

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Hora: ");
  lcd.print(now.hour(), DEC);
  lcd.print(":");
  lcd.print(now.minute(), DEC);
  lcd.print(":");
  lcd.print(now.second(), DEC);

  lcd.setCursor(0, 1);
  lcd.print("Data: ");
  lcd.print(now.day(), DEC);
  lcd.print("/");
  lcd.print(now.month(), DEC);
  lcd.print("/");
  lcd.print(now.year(), DEC);

  if (!alarmeAtivo && now.hour() == horaDespertador && now.minute() == minutoDespertador)
  {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("ALARME!");
    enviar_req();
    delay(10000);
    alarmeAtivo = true;
}

delay (1000);
}
